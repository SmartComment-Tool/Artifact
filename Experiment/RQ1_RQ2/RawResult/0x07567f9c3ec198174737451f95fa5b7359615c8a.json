[
  {
    "contract": "IouVesting",
    "function": "unstake",
    "explanation": "Donation ratio check uses 100 instead of 1e18 for 100% in 18 decimals",
    "contract_code": "\n=== Implementation of Function unstake(uint256,uint256) ===\nfunction unstake(uint256 amount, uint256 donationRatio) external override {\r\n        require(\r\n            amount > uint256(0),\r\n            \"IouVesting: Unstake amount needs to be greater than 0\"\r\n        );\r\n        require(\r\n            userShares[msg.sender] != uint256(0),\r\n            \"IouVesting: There is nothing to unstake for you\"\r\n        );\r\n\r\n        require(\r\n            userShares[msg.sender] >= amount,\r\n            \"IouVesting: You cannot unstake more than you staked\"\r\n        );\r\n\r\n        require(\r\n            donationRatio <= uint256(100),\r\n            \"IouVesting: You cannot donate more than you earned\"\r\n        );\r\n\r\n        uint256 amountVsSharesRatio =\r\n            getRatio(amount, userShares[msg.sender], 18);\r\n        uint256 totalUserPossibleRewards =\r\n            (computeUserTotalPossibleRewards(msg.sender, false) *\r\n                amountVsSharesRatio) / (10**18);\r\n\r\n        uint256 totalCurrentUserRewards =\r\n            (getCurrentRewards(true) * amountVsSharesRatio) / (10**18);\r\n\r\n        if (totalRewards() > 0) {\r\n            uint256 donationAmount = 0;\r\n            if (donationAddress != address(0) && donationRatio > 0) {\r\n                donationAmount =\r\n                    (donationRatio * totalCurrentUserRewards) /\r\n                    (10**18);\r\n            }\r\n\r\n            uint256 toTransferToUser = totalCurrentUserRewards;\r\n            if (donationAmount > 0) {\r\n                toTransferToUser = totalCurrentUserRewards - donationAmount;\r\n                require(\r\n                    _rewardsPool.transfer(donationAddress, donationAmount),\r\n                    \"IouVesting: transfer from rewards pool to donation receiver failed\"\r\n                );\r\n            }\r\n\r\n            require(\r\n                _rewardsPool.transfer(msg.sender, toTransferToUser),\r\n                \"IouVesting: transfer from rewards pool failed\"\r\n            );\r\n            emit RewardsClaimed(msg.sender, toTransferToUser);\r\n            emit RewardsDonated(msg.sender, donationAmount);\r\n\r\n            userEarnings[msg.sender] += totalCurrentUserRewards;\r\n\r\n            availableForfeitedAmount += (totalUserPossibleRewards -\r\n                totalCurrentUserRewards);\r\n        }\r\n\r\n        require(\r\n            _iouPool.transfer(address(_lockedIouPool), amount),\r\n            \"IouVesting: transfer from iou pool to locked iou pool failed\"\r\n        );\r\n\r\n        userShares[msg.sender] -= amount;\r\n        if (userShares[msg.sender] == uint256(0)) {\r\n            totalUsers--;\r\n        }\r\n    }\n    \n=== Functions that function unstake internally calls ===\nfunction computeUserTotalPossibleRewards(\r\n        address user,\r\n        bool includeForfeited\r\n    ) private view returns (uint256) {\r\n        uint256 originalAmount = (userShares[user] * ratio) / (10**18);\r\n        if (!includeForfeited) return originalAmount;\r\n\r\n        uint256 shareVsTotalStakedRatio =\r\n            getRatio(userShares[user], totalStaked(), 18);\r\n        uint256 forfeitedAmount =\r\n            (shareVsTotalStakedRatio * availableForfeitedAmount) / (10**18);\r\n\r\n        return originalAmount.add(forfeitedAmount);\r\n    }\nfunction getCurrentRewards(bool includeForfeited)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        require(\r\n            msg.sender != address(0),\r\n            \"IouVesting: Cannot get rewards for address(0).\"\r\n        );\r\n\r\n        require(\r\n            userShares[msg.sender] != uint256(0),\r\n            \"IouVesting: Sender hasn't staked anything.\"\r\n        );\r\n\r\n        return computeRewards(msg.sender, includeForfeited);\r\n    }\nfunction getRatio(\r\n        uint256 numerator,\r\n        uint256 denominator,\r\n        uint256 precision\r\n    ) private view returns (uint256) {\r\n        uint256 _numerator = numerator * 10**(precision + 1);\r\n        uint256 _quotient = ((_numerator / denominator) + 5) / 10;\r\n        return (_quotient);\r\n    }\nfunction totalRewards() public view override returns (uint256) {\r\n        return _rewardsPool.balance();\r\n    }\nfunction transfer(address to, uint256 value)\r\n        external\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        return token.transfer(to, value);\r\n    }",
    "rewritten_code": {
      "unstake": "function unstake(uint256 amount, uint256 donationRatio) external override {\n        require(amount > 0, \"IouVesting: Unstake amount needs to be greater than 0\");\n        require(userShares[msg.sender] >= amount, \"IouVesting: You cannot unstake more than you staked\");\n        require(donationRatio <= 1e18, \"IouVesting: Donation ratio exceeds 100%\");\n\n        uint256 amountVsSharesRatio = getRatio(amount, userShares[msg.sender], 18);\n        uint256 totalUserPossibleRewards = (computeUserTotalPossibleRewards(msg.sender, false) * amountVsSharesRatio) / 1e18;\n        uint256 totalCurrentUserRewards = (getCurrentRewards(true) * amountVsSharesRatio) / 1e18;\n\n        if (totalRewards() > 0) {\n            uint256 donationAmount = 0;\n            if (donationAddress != address(0) && donationRatio > 0) {\n                donationAmount = (donationRatio * totalCurrentUserRewards) / 1e18;\n            }\n\n            uint256 toTransferToUser = totalCurrentUserRewards - donationAmount;\n            if (donationAmount > 0) {\n                require(_rewardsPool.transfer(donationAddress, donationAmount), \"Donation transfer failed\");\n            }\n            require(_rewardsPool.transfer(msg.sender, toTransferToUser), \"Reward transfer failed\");\n            emit RewardsClaimed(msg.sender, toTransferToUser);\n            emit RewardsDonated(msg.sender, donationAmount);\n\n            userEarnings[msg.sender] += totalCurrentUserRewards;\n            availableForfeitedAmount += (totalUserPossibleRewards - totalCurrentUserRewards);\n        }\n\n        require(_iouPool.transfer(address(_lockedIouPool), amount), \"IOU transfer failed\");\n        userShares[msg.sender] -= amount;\n        if (userShares[msg.sender] == 0) totalUsers--;\n    }"
    }
  }
]