[
  {
    "contract": "LockDrop",
    "function": "stakeETH",
    "explanation": "Comment requires staking period between 90-365, code allows 30-365.",
    "contract_code": "\n=== Implementation of Function stakeETH(uint256) ===\nnction stakeETH(uint256 stakingPeriod) public payable {\r\n\r\n        require(msg.value > 0, 'Msg value = 0.');\r\n\r\n        require(_weights[msg.sender] == 0, 'No topping up.');\r\n\r\n        require(block.timestamp <= _stakingEnd, 'Closed for contributions.');\r\n\r\n        require(stakingPeriod >= 30 && stakingPeriod <= 365, 'Staking period outside of allowed range.');\r\n\r\n        uint256 totalTime = _stakingEnd + stakingPeriod * 1 days - block.timestamp;\r\n        uint256 weight = totalTime.mul(msg.value);\r\n\r\n        _weightsSum = _weightsSum.add(weight);\r\n        _weights[msg.sender] = weight;\r\n\r\n        _lockingEnds[msg.sender] = _stakingEnd + stakingPeriod * 1 days;\r\n\r\n        LockETH lockETH = (new LockETH).value(msg.value)(_lockingEnds[msg.sender], msg.sender);\r\n\r\n        require(address(lockETH).balance >= msg.value);\r\n\r\n        emit Staked(msg.sender, address(lockETH), msg.value, _lockingEnds[msg.sender]);\r\n\r\n    }\r\n\n    \n=== Functions that function stakeETH internally calls ===\nfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\nfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }",
    "rewritten_code": {
      "stakeETH(uint256)": "function stakeETH(uint256 stakingPeriod) public payable {\n        require(msg.value > 0, 'Msg value = 0.');\n        require(_weights[msg.sender] == 0, 'No topping up.');\n        require(block.timestamp <= _stakingEnd, 'Closed for contributions.');\n        require(stakingPeriod >= 90 && stakingPeriod <= 365, 'Staking period outside of allowed range.');\n        uint256 totalTime = _stakingEnd + stakingPeriod * 1 days - block.timestamp;\n        uint256 weight = totalTime.mul(msg.value);\n        _weightsSum = _weightsSum.add(weight);\n        _weights[msg.sender] = weight;\n        _lockingEnds[msg.sender] = _stakingEnd + stakingPeriod * 1 days;\n        LockETH lockETH = (new LockETH).value(msg.value)(_lockingEnds[msg.sender], msg.sender);\n        require(address(lockETH).balance >= msg.value);\n        emit Staked(msg.sender, address(lockETH), msg.value, _lockingEnds[msg.sender]);\n    }"
    }
  }
]