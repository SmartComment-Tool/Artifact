[
  {
    "contract": "KatanaNSamurai",
    "function": "shogunate",
    "explanation": "Join condition checks empty string instead of 'None' as specified in comment",
    "contract_code": "\n=== Implementation of Function shogunate(uint256,string,string) ===\nfunction shogunate(uint256 _tokenId, string memory _from, string memory _to) public {\n\t\trequire(hasShogunateStarted == true, \"Shogunate hasn't started.\");\n\t\trequire(_tokenId <= totalSupply(), \"TokenId out of totalSupply.\");\n\t\trequire(ownerOf(_tokenId) == msg.sender, \"Not the tokenId owner.\");\n\n\t\tif (keccak256(abi.encodePacked(_from)) == keccak256(abi.encodePacked(\"None\"))) { // Join shogunate\n\t\t\trequire(keccak256(abi.encodePacked(shogunateBelong[_tokenId])) == keccak256(abi.encodePacked(\"\")), \"Shogunate is not None.\");\n\t\t\trequire(validShogunate[_to] == true, \"Shogunate name is invalid.\");\n\t\t\t\n\t\t\tshogunateBelong[_tokenId] = _to;\n\t\t\tshogunateQuantity[_to] = shogunateQuantity[_to].add(1);\n\t\t} else { // Change shogunate \n\t\t\trequire(keccak256(abi.encodePacked(shogunateBelong[_tokenId])) == keccak256(abi.encodePacked(_from)), \"Shogunate verification failed.\");\n\t\t\trequire(validShogunate[_to] == true, \"Shogunate name is invalid.\");\n\t\t\t\n\t\t\tshogunateBelong[_tokenId] = _to;\n\t\t\tshogunateQuantity[_to] = shogunateQuantity[_to].add(1);\n\t\t\tshogunateQuantity[_from] = shogunateQuantity[_from].sub(1);\n\t\t}\n\t\t\n\t\temit shogunateEvent(msg.sender, _tokenId, _from, _to);\n\t}\n    \n=== Functions that function shogunate internally calls ===\nfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\nfunction ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        return _tokenOwners.get(tokenId, \"ERC721: owner query for nonexistent token\");\n    }\nfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\nfunction totalSupply() public view virtual override returns (uint256) {\n        return _tokenOwners.length();\n    }",
    "rewritten_code": {
      "shogunate": "function shogunate(uint256 _tokenId, string memory _from, string memory _to) public {\n\t\trequire(hasShogunateStarted == true, \"Shogunate hasn't started.\");\n\t\trequire(_tokenId <= totalSupply(), \"TokenId out of totalSupply.\");\n\t\trequire(ownerOf(_tokenId) == msg.sender, \"Not the tokenId owner.\");\n\n\t\tif (keccak256(abi.encodePacked(_from)) == keccak256(abi.encodePacked(\"None\"))) { // Join shogunate\n\t\t\trequire(keccak256(abi.encodePacked(shogunateBelong[_tokenId])) == keccak256(abi.encodePacked(\"None\")), \"Shogunate is not None.\");\n\t\t\trequire(validShogunate[_to] == true, \"Shogunate name is invalid.\");\n\t\t\t\n\t\t\tshogunateBelong[_tokenId] = _to;\n\t\t\tshogunateQuantity[_to] = shogunateQuantity[_to].add(1);\n\t\t} else { // Change shogunate \n\t\t\trequire(keccak256(abi.encodePacked(shogunateBelong[_tokenId])) == keccak256(abi.encodePacked(_from)), \"Shogunate verification failed.\");\n\t\t\trequire(validShogunate[_to] == true, \"Shogunate name is invalid.\");\n\t\t\t\n\t\t\tshogunateBelong[_tokenId] = _to;\n\t\t\tshogunateQuantity[_to] = shogunateQuantity[_to].add(1);\n\t\t\tshogunateQuantity[_from] = shogunateQuantity[_from].sub(1);\n\t\t}\n\t\t\n\t\temit shogunateEvent(msg.sender, _tokenId, _from, _to);\n\t}"
    }
  }
]