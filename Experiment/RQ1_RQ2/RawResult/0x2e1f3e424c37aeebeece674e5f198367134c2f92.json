[
  {
    "contract": "RustyHogsFactory",
    "function": "ownerOf",
    "explanation": "Comment specifies using isApprovedForAll, but function returns owner() without it.",
    "contract_code": "\n=== Implementation of Function ownerOf(uint256) ===\nfunction ownerOf(uint256) public view returns (address _owner) {\n        return owner();\n    }\n    \n=== Functions that function ownerOf internally calls ===\nfunction owner() public view virtual returns (address) {\n        return _owner;\n    }",
    "rewritten_code": {
      "ownerOf": "function ownerOf(uint256) public view returns (address _owner) {\n    return isApprovedForAll(owner(), _msgSender()) ? owner() : address(0);\n}"
    }
  },
  {
    "contract": "RustyHogsFactory",
    "function": "mint",
    "explanation": "Access control allows lootBoxNftAddress sender not mentioned in comment",
    "contract_code": "\n=== Implementation of Function mint(uint256,address) ===\nfunction mint(uint256 _optionId, address _toAddress) override public {\n        ProxyRegistry proxyRegistry = ProxyRegistry(proxyRegistryAddress);\n        assert(\n            address(proxyRegistry.proxies(owner())) == _msgSender() ||\n                owner() == _msgSender() ||\n                _msgSender() == lootBoxNftAddress\n        );\n        require(canMint(_optionId));\n\n        RustyHogs openSeaCreature = RustyHogs(nftAddress);\n        if (_optionId == SINGLE_CREATURE_OPTION) {\n            openSeaCreature.mintTo(_toAddress);\n        } else if (_optionId == MULTIPLE_CREATURE_OPTION) {\n            for (\n                uint256 i = 0;\n                i < NUM_CREATURES_IN_MULTIPLE_CREATURE_OPTION;\n                i++\n            ) {\n                openSeaCreature.mintTo(_toAddress);\n            }\n        } else if (_optionId == LOOTBOX_OPTION) {\n            RustyHogsLootBox openSeaCreatureLootBox = RustyHogsLootBox(\n                lootBoxNftAddress\n            );\n            openSeaCreatureLootBox.mintTo(_toAddress);\n        }\n    }\n    \n=== Functions that function mint internally calls ===\nfunction _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\nfunction canMint(uint256 _optionId) override public view returns (bool) {\n        if (_optionId >= NUM_OPTIONS) {\n            return false;\n        }\n\n        RustyHogs openSeaCreature = RustyHogs(nftAddress);\n        uint256 creatureSupply = openSeaCreature.totalSupply();\n\n        uint256 numItemsAllocated = 0;\n        if (_optionId == SINGLE_CREATURE_OPTION) {\n            numItemsAllocated = 1;\n        } else if (_optionId == MULTIPLE_CREATURE_OPTION) {\n            numItemsAllocated = NUM_CREATURES_IN_MULTIPLE_CREATURE_OPTION;\n        } else if (_optionId == LOOTBOX_OPTION) {\n            RustyHogsLootBox openSeaCreatureLootBox = RustyHogsLootBox(\n                lootBoxNftAddress\n            );\n            numItemsAllocated = openSeaCreatureLootBox.itemsPerLootbox();\n        }\n        return creatureSupply < (CREATURE_SUPPLY - numItemsAllocated);\n    }\nfunction mintTo(address _to) public onlyOwner {\n        uint256 currentTokenId = _nextTokenId.current();\n        _nextTokenId.increment();\n        _safeMint(_to, currentTokenId);\n    }\nfunction owner() public view virtual returns (address) {\n        return _owner;\n    }",
    "rewritten_code": {
      "mint(uint256,address)": "function mint(uint256 _optionId, address _toAddress) override public {\n        ProxyRegistry proxyRegistry = ProxyRegistry(proxyRegistryAddress);\n        assert(\n            address(proxyRegistry.proxies(owner())) == _msgSender() ||\n                owner() == _msgSender()\n        );\n        require(canMint(_optionId));\n\n        RustyHogs openSeaCreature = RustyHogs(nftAddress);\n        if (_optionId == SINGLE_CREATURE_OPTION) {\n            openSeaCreature.mintTo(_toAddress);\n        } else if (_optionId == MULTIPLE_CREATURE_OPTION) {\n            for (\n                uint256 i = 0;\n                i < NUM_CREATURES_IN_MULTIPLE_CREATURE_OPTION;\n                i++\n            ) {\n                openSeaCreature.mintTo(_toAddress);\n            }\n        } else if (_optionId == LOOTBOX_OPTION) {\n            RustyHogsLootBox openSeaCreatureLootBox = RustyHogsLootBox(\n                lootBoxNftAddress\n            );\n            openSeaCreatureLootBox.mintTo(_toAddress);\n        }\n    }"
    }
  }
]