[
  {
    "contract": "WheeliesNFT",
    "function": "tokenURI",
    "explanation": "Token URI increments tokenId by 1, conflicting with standard metadata expectations.",
    "contract_code": "\n=== Implementation of Function tokenURI(uint256) ===\nfunction tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\r\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\r\n\r\n        return bytes(baseURI).length > 0\r\n            ? string(abi.encodePacked(baseURI, Strings.toString(tokenId + 1), \".json\"))\r\n            : \"\";\r\n    }\n    \n=== Functions that function tokenURI internally calls ===\nfunction _exists(uint256 tokenId) internal view virtual returns (bool) {\r\n        return _owners[tokenId] != address(0);\r\n    }\nfunction toString(uint256 value) internal pure returns (string memory) {\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }",
    "rewritten_code": {
      "tokenURI": "function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        return bytes(baseURI).length > 0\n            ? string(abi.encodePacked(baseURI, Strings.toString(tokenId), \".json\"))\n            : \"\";\n    }"
    }
  }
]