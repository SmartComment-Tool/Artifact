[
  {
    "contract": "SmartMinerToken",
    "function": "buyToken",
    "explanation": "Code checks _invest <5e-1 instead of 5e-2 for 0.05 case, causing higher bonuses.",
    "contract_code": "\n=== Implementation of Function buyToken(address,uint256) ===\nfunction buyToken(address _investor, uint256 _invest) canDistr public {\r\n\t\tuint256 toGive = tokenPerETH.mul(_invest) / 1 ether;\r\n\t\tuint256\tbonus = 0;\r\n\t\tif(_invest >= 1 ether/100 && _invest < 1 ether/100000){ \r\n\t\t\tbonus = toGive*1/100;\r\n\t\t}\r\n\t\tif(_invest >= 1 ether/100 && _invest < 5 ether/100){ \r\n\t\t\tbonus = toGive*5/100;\r\n\t\t}\r\n\t\tif(_invest >= 1 ether/100 && _invest < 1 ether/10){ //if 0,01\r\n\t\t\tbonus = toGive*10/100;\r\n\t\t}\r\n\t\tif(_invest >= 1 ether/100 && _invest < 5 ether/10){ //if 0,05\r\n\t\t\tbonus = toGive*20/100;\r\n\t\t}\t\r\n\t\tif(_invest >= 1 ether/10 && _invest < 1 ether){ //if 0,1\r\n\t\t\tbonus = toGive*30/100;\r\n\t\t}\t\t\r\n\t\tif(_invest >= 1 ether){ //if 1\r\n\t\t\tbonus = toGive*50/100;\r\n\t\t}\t\t\r\n\t\ttoGive = toGive.add(bonus);\r\n\t\t\r\n\t\trequire(toGive <= totalRemaining);\r\n\t\t\r\n\t\tdistr(_investor, toGive);\r\n\t}\n    \n=== Functions that function buyToken internally calls ===\nfunction add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\nfunction distr(address _to, uint256 _amount) canDistr private returns (bool) {\r\n        totalDistributed = totalDistributed.add(_amount);   \r\n\t\ttotalRemaining = totalRemaining.sub(_amount);\t\t\r\n        balances[_to] = balances[_to].add(_amount);\r\n        emit Distr(_to, _amount);\r\n        emit Transfer(address(0), _to, _amount);\r\n\r\n        return true;\r\n    }\nfunction mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\nmodifier canDistr() {\r\n        require(!distributionFinished);\r\n        _;\r\n    }",
    "rewritten_code": {
      "buyToken": "function buyToken(address _investor, uint256 _invest) canDistr public {\n\t\tuint256 toGive = tokenPerETH.mul(_invest) / 1 ether;\n\t\tuint256\tbonus = 0;\n\t\tif(_invest >= 1 ether/100 && _invest < 1 ether/100000){ \n\t\t\tbonus = toGive*1/100;\n\t\t}\n\t\tif(_invest >= 1 ether/100 && _invest < 5 ether/100){ \n\t\t\tbonus = toGive*5/100;\n\t\t}\n\t\tif(_invest >= 1 ether/100 && _invest < 1 ether/10){ \n\t\t\tbonus = toGive*10/100;\n\t\t}\n\t\tif(_invest >= 1 ether/100 && _invest < 5 ether/100){ \n\t\t\tbonus = toGive*20/100;\n\t\t}\t\n\t\tif(_invest >= 1 ether/10 && _invest < 1 ether){ \n\t\t\tbonus = toGive*30/100;\n\t\t}\t\t\n\t\tif(_invest >= 1 ether){ \n\t\t\tbonus = toGive*50/100;\n\t\t}\t\t\n\t\ttoGive = toGive.add(bonus);\n\t\t\n\t\trequire(toGive <= totalRemaining);\n\t\t\n\t\tdistr(_investor, toGive);\n\t}"
    }
  }
]